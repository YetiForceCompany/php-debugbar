(function(f){var d=PhpDebugBar.utils.makecsscls("phpdebugbar-widgets-");var e=PhpDebugBar.Widgets.SQLQueriesWidget=PhpDebugBar.Widget.extend({className:d("sqlqueries"),onFilterClick:function(a){f(a).toggleClass(d("excluded"));var b=[];this.$toolbar.find(d(".filter")+d(".excluded")).each(function(){b.push(this.rel)});this.$list.$el.find("li[connection="+f(a).attr("rel")+"]").toggle();this.set("exclude",b)},render:function(){this.$status=f("<div />").addClass(d("status")).appendTo(this.$el);this.$toolbar=f("<div></div>").addClass(d("toolbar")).appendTo(this.$el);var a=[],b=this;this.$list=new PhpDebugBar.Widgets.ListWidget({itemRenderer:function(l,c){f("<code />").addClass(d("sql")).html(PhpDebugBar.Widgets.highlight(c.sql,"sql")).appendTo(l);if(c.duration_str){f('<span title="Duration" />').addClass(d("duration")).text(c.duration_str).appendTo(l)}if(c.memory_str){f('<span title="Memory usage" />').addClass(d("memory")).text(c.memory_str).appendTo(l)}if(typeof(c.row_count)!="undefined"){f('<span title="Row count" />').addClass(d("row-count")).text(c.row_count).appendTo(l)}if(typeof(c.stmt_id)!="undefined"&&c.stmt_id){f('<span title="Prepared statement ID" />').addClass(d("stmt-id")).text(c.stmt_id).appendTo(l)}if(c.connection){f('<span title="Connection" />').addClass(d("database")).text(c.connection).appendTo(l);l.attr("connection",c.connection);if(f.inArray(c.connection,a)==-1){a.push(c.connection);f("<a />").addClass(d("filter")).text(c.connection).attr("rel",c.connection).on("click",function(){b.onFilterClick(this)}).appendTo(b.$toolbar);if(a.length>1){b.$toolbar.show();b.$list.$el.css("margin-bottom","20px")}}}if(typeof(c.is_success)!="undefined"&&!c.is_success){l.addClass(d("error"));l.append(f("<span />").addClass(d("error")).text("["+c.error_code+"] "+c.error_message))}if(c.params&&!f.isEmptyObject(c.params)){var j=f('<table><tr><th colspan="2">Params</th></tr></table>').addClass(d("params")).appendTo(l);for(var k in c.params){if(typeof c.params[k]!=="function"){j.append('<tr><td class="'+d("name")+'">'+k+'</td><td class="'+d("value")+'">'+c.params[k]+"</td></tr>")}}l.css("cursor","pointer").click(function(){if(j.is(":visible")){j.hide()}else{j.show()}})}}});this.$list.$el.appendTo(this.$el);this.bindAttr("data",function(m){this.$list.set("data",m.statements);this.$status.empty();for(var c={},i=0,o=0;o<m.statements.length;o++){var n=m.statements[o].sql;if(m.statements[o].params&&!f.isEmptyObject(m.statements[o].params)){n+=" {"+f.param(m.statements[o].params,false)+"}"}c[n]=c[n]||{keys:[]};c[n].keys.push(o)}for(var n in c){if(c[n].keys.length>1){i++;for(var o=0;o<c[n].keys.length;o++){this.$list.$el.find("."+d("list-item")).eq(c[n].keys[o]).addClass(d("sql-duplicate")).addClass(d("sql-duplicate-"+i))}}}var p=f("<span />").text(m.nb_statements+" statements were executed").appendTo(this.$status);if(m.nb_failed_statements){p.append(", "+m.nb_failed_statements+" of which failed")}if(i){p.append(", "+i+" of which were duplicated")}if(m.accumulated_duration_str){this.$status.append(f('<span title="Accumulated duration" />').addClass(d("duration")).text(m.accumulated_duration_str))}if(m.memory_usage_str){this.$status.append(f('<span title="Memory usage" />').addClass(d("memory")).text(m.memory_usage_str))}})}})})(PhpDebugBar.$);